var fs = require('fs');
var path = require('path');
var child_process = require('child_process');


var localconfigName = '\\localconfig.json';
function loadDB(a_URL,a_callback) {
    fs.readFile(a_URL+localconfigName, 'utf8',function(err, data) {
        if (err) {
            console.log("FATAL An error occurred trying to read in the file: " + err);
            // process.exit(-2);
        }
        if (data) {
                // console.log('data is:',data)
                data = data.replace(/.*?\{/,'{');
                console.log('data2 is:',data)
                dataarr = data.split('');
                // console.log('dataarr is:',dataarr)
            try{
                // console.log(JSON.parse(data))
                a_callback(JSON.parse(data));
            }catch(e){
                console.error('load DB error:',e)
            }
            // a_callback(JSON.parse(data));
        } else {
            console.log("No data in "+localconfigName);
            // process.exit(-1);
        }
    });
}
function getCurrentDir(root) {
    try{
        var files = fs.readdirSync(root);
    }catch(e){
        console.error('getCurrentDir error, root is:'+root,', error is:',e);
        // return getCurrentDir(root);
    }
    return files
}

function ZipInteractionFile(){
    var that = this;
    that.init = function(options) {
        var appDir = process.cwd();
        console.log('\nZipInteractionFile==================================')
        that.path = options.path;
        process.chdir(that.path);
        loadDB(options.path,function(a_json) {
            console.log(a_json.cmsip, a_json.cmsport);
            that.scanHTMLZip({config:a_json,callback:function(data) {
                // console.log('scanHTMLZip,data is:',data)
                that.zipHTML({data:data,callback:function(array){
                    process.chdir(appDir);
                    if(0==array.length){
                        window.alert('没有检查到更新，停止打包');                        
                    }else{
                        var arrayBackup = [];
                        array.forEach(function(e){
                            arrayBackup.push(e.path);
                        });

                        console.log('zipHTML all');
                        console.log('zip :\n',arrayBackup.join('\n'));
                        window.alert('全部打包成功');                        
                    }
                }});
            }});
        });
    }
    that.scanHTMLZip = function(a_options) {
        var that = this;
        if(a_options.config.articles){
            var articles = [],htmlName={},filesName;
            a_options.config.articles.forEach(function(a_article, a_index) {
                if(fs.existsSync(a_article.localName)){                    
                    filesName = getCurrentDir(a_article.localName);
                    filesName.forEach(function(a_HTML, a_HTMLIndex) {
                        console.log('scanHTMLZip, fileName is:',a_HTML)
                        var reg = /^[0-9]+$/g;
                        if(reg.test(a_HTML) ){
                            htmlName[a_HTML]=1;
                            console.log('match html ,name is:',a_HTML);
                            if(!a_options.config.articles[a_index].html){
                                a_options.config.articles[a_index].html = {};
                            }
                            if(!a_options.config.articles[a_index].html[a_HTML]){
                                a_options.config.articles[a_index].html[a_HTML] = {};
                            }
                        }
                    })
                    // delete old item in local JSON file
                    for(var i in a_options.config.articles[a_index].html){
                        if(!htmlName[i]){
                            delete a_options.config.articles[a_index].html[i];
                        }
                    }
                }else{
                    console.error('scanHTMLZip, can not find folder:',a_article.localName)
                }
            });
            that.updateConfigJSON({data:a_options.config});
            a_options.callback(a_options.config);
        }
    }
    that.zipHTML = function(a_options){
        var that=this,magazineJSON,waiting4zipBackup,waiting4zip=[],waitingzipObj,updateTime;
        try{
            if('string' == typeof(a_options.data)){
                magazineJSON = JSON.parse(a_options.data);
            }else{
                magazineJSON = a_options.data;
            }

        }catch(e){
            console.error('zipHTML,JSON.parse error:',e);
            return;
        }
        a_options.data.articles.forEach(function(a_article, a_articleIndex) {
            if(a_article.html){
                for(var htmlName in a_article.html){
                    waiting4zip.push({title:a_article.title,localName:a_article.localName,htmlName:htmlName,articleIndex:a_articleIndex,path:a_article.localName+'/'+htmlName});
                }
            }
        })
        waiting4zipBackup = waiting4zip.concat();
        function execZip(a_waiting4zip){
            try{                
                waitingzipObj = a_waiting4zip.shift();
                var zipTime1;
                if(fs.existsSync(waitingzipObj.path+'.zip')){
                    if(fs.existsSync(waitingzipObj.path)){                    
                        var zipTime = new Date(fs.statSync(waitingzipObj.path+'.zip').mtime.toString()).getTime();
                        var folderTime = new Date(fs.statSync(waitingzipObj.path).mtime.toString()).getTime()-5000;
                        // 没有修改，不进行打包
                        if(zipTime && zipTime > folderTime){
                            console.log('execZip, no modify:',waitingzipObj.path)
                            // 还有
                            if(0<a_waiting4zip.length){
                                execZip(a_waiting4zip);
                                return;
                            }else{
                                // update all zip time
                                that.updateConfigJSON({data:a_options.data});
                                // finish zip
                                a_options.callback(waiting4zipBackup);
                                return ;
                            }
                        }
                        fs.unlinkSync(waitingzipObj.path+'.zip');
                    }else{
                        // config 有记录，但local folder 被意外删掉
                        console.error('execZip, can not find folder:',waitingzipObj.path);
                        execZip(a_waiting4zip);
                        return;
                    }
                }

                process.chdir(waitingzipObj.path);

                child_process.exec(a_options.data.zipcommand + ' a ../'+waitingzipObj.htmlName+'.zip '+a_options.data.zipFileType, function(error, stdout, stderr) {
                    if(error){
                        console.error('压缩出错，请检查config json 的压缩命令！')
                    }else{                    
                        process.chdir(that.path);
                        console.log('zip '+waitingzipObj.path+' ok');
                        // a_options.data.articles[waitingzipObj.articleIndex].html[waitingzipObj.htmlName].type = fs.statSync(waitingzipObj.path).mtime.toString();
                        a_options.data.articles[waitingzipObj.articleIndex].html[waitingzipObj.htmlName].type = 'zip';
                        if(0<a_waiting4zip.length){
                            execZip(a_waiting4zip);
                        }else{
                            // update all zip time
                            that.updateConfigJSON({data:a_options.data});
                            a_options.callback(waiting4zipBackup);
                        }
                    }
                })
            }catch(e){
                console.error('execZip, error:',e);
            }

            return;
        };
        execZip(waiting4zip);
    }

    that.updateConfigJSON = function(a_options){
        var that = this;
        var JSONString = JSON.stringify(a_options.data);
        // console.log('JSONString is:',JSONString);
        fs.writeFileSync(that.path+localconfigName, JSONString);
    }

}



exports.ZipInteractionFile = ZipInteractionFile;