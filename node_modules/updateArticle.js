var fs = require('fs');
var path = require('path');
var http = require('http');

function loadDB(a_URL,a_callback) {
    fs.readFile(a_URL+'db.json', 'utf8',function(err, data) {
        if (err) {
            console.log("FATAL An error occurred trying to read in the file: " + err);
            process.exit(-2);
        }
        if (data) {
            // console.log('JSON.parse is:',JSON.parse)
                data = data.replace(/.*\{/,'{');
                // dataarr = data.split('');
                // console.log('dataarr is:',dataarr)
            try{
                // console.log(JSON.parse(data))
                a_callback(JSON.parse(data));
            }catch(e){
                console.log(e)
            }
            // a_callback(JSON.parse(data));
        } else {
            console.log("No data in db.json");
            process.exit(-1);
        }
    });
}

function UpdateArticle(){
    var that = this;
    that.init = function(options) {
        that.path = options.path;
        loadDB(options.path,function(a_json) {
            console.log(a_json.cmsip, a_json.cmsport);
            that.getArticlesNameFromCMS({config:a_json,callback:function(data) {
                // console.log('getArticlesNameFromCMS,data is:',data)
                that.filterArticlesNameFromJSONString({data:data,callback:function(data){
                    // console.log('filterArticlesNameFromJSONString,array is:',data);
                    that.creatFolderByArticlesName({articles:data,config:a_json});
                }});
            }});
        });
    }
    that.getArticlesNameFromCMS = function(a_options) {
        // http://192.168.11.9:8888/magazine/preview/ipad2/170/magazine.json
        var device = 'ipad'==a_options.config.device?'ipad2':'iphone4';
        var options = {
            host: a_options.config.cmsip,
            port: a_options.config.cmsport,
            path: '/magazine/preview/'+device+'/'+a_options.config.issueID+'/magazine.json'
        };
        http.get(options, function(res) {
            var body = '';
            res.on('data', function(data) {
                body += data;
                console.log('data is:',data);
            }).on('end', function() {
                a_options.callback(body);
                return true;
            });
        });

    }
    that.filterArticlesNameFromJSONString = function(a_options){
        try{
            var magazineJSON = JSON.parse(a_options.data);
        }catch(e){
            console.error(e);
            return;
        }
        var arr = [];
        magazineJSON.sections.forEach(function(a_section, a_index) {
            // console.log('a_section is:',a_section)
            a_section.articles.forEach(function(a_article, a_index) {
                arr.push({title:a_article.title,id:a_article.id});
            });
        });
        a_options.callback(arr);
    }
    that.creatFolderByArticlesName = function(a_options){
        var folderExist = false;
        a_options.articles.forEach(function(a_article, a_index) {

            a_options.config.articles.forEach(function(a_articleSaved, a_index) {
                if(a_article.id==a_articleSaved.id){
                    // update article name in config JSON
                    a_options.config.articles[a_index].name = a_article.name;
                    folderExist = true;
                }
            })
            if(folderExist){
                fs.rename(a_articleSaved.name,a_article.name);
            }else{
                fs.mkdir(articleName);
            }

        })
    }
    that.updateConfigJSON = function(a_options){
        var that = this;
        fs.writeFileSync(that.path+'db.json', a_options.data);
    }

}



exports.UpdateArticle = UpdateArticle;