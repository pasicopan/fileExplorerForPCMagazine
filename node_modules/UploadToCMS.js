var fs = require('fs');
var path = require('path');
var http = require('http');
var cheerio = require('cheerio');



var localconfigName = '\\localconfig.json';
function loadDB(a_URL,a_callback) {
    fs.readFile(a_URL+localconfigName, 'utf8',function(err, data) {
        if (err) {
            console.log("FATAL An error occurred trying to read in the file: " + err);
            // process.exit(-2);
        }
        if (data) {
                // console.log('data is:',data)
                data = data.replace(/.*?\{/,'{');
                // console.log('data2 is:',data)
                dataarr = data.split('');
                // console.log('dataarr is:',dataarr)
            try{
                // console.log(JSON.parse(data))
                a_callback(JSON.parse(data));
            }catch(e){
                console.error('load DB error:',e)
            }
            // a_callback(JSON.parse(data));
        } else {
            console.log("No data in "+localconfigName);
            // process.exit(-1);
        }
    });
}

function UploadToCMS(){
    var that = this;
    that.init = function(options) {
        var appDir = process.cwd();
        console.log('\nUploadToCMS==================================')
        that.path = options.path;
        that.$ = options.$;
        if(that.$.hasClass('working')){
            console.warn('已经在上传中')
            return;
        }else{
            that.$.addClass('working');
        }
        process.chdir(that.path);
        loadDB(options.path,function(a_json) {
            console.log(a_json.cmsip, a_json.cmsport);
            that.scanHTMLZipInfoFromConfigJSON({config:a_json,callback:function(data,array) {
                process.chdir(appDir);
                if(0==array.length){                  
                    that.end();
                    window.alert('没有需要上传的文件');
                }else{
                    var arrayBackup = [];
                    array.forEach(function(e){
                        arrayBackup.push(e.zipPath);
                    });
                    // console.log('scanHTMLZipInfoFromConfigJSON,data is:',data)
                    that.upload({config:data,waiting4upload:array,callback:function(data){
                        process.chdir(appDir);
                        console.log('upload all');
                        console.log('upload:\n',arrayBackup.join('\n'));
                        that.end();
                        window.alert('全部上传成功');
                    }});
                }
            }});
        });
    }
    that.end = function() {
        var that = this;
        if(that.$){
            that.$.removeClass('working');
        }
    }
    that.scanHTMLZipInfoFromConfigJSON = function(a_options) {
        var that = this,fileString;
        // if there are some articles info in config JSON 
        if(a_options.config.articles){
            var waiting4upload=[];
            a_options.config.articles.forEach(function(a_article, a_index) {
                if(a_article.html){
                    for(var a_HTML in a_article.html){
                        // 'zip'==type:ready to upload
                        // 'sent'==type:ignore
                        if('zip' == a_article.html[a_HTML].type){
                            if(fs.existsSync(a_article.localName+'/'+a_HTML+'.zip')){
                                fileString = fs.readFileSync(a_article.localName+'/'+a_HTML+'.zip');
                                waiting4upload.push({
                                    page:a_HTML,
                                    articleIndex : a_index,
                                    articleID : a_article.id,
                                    zipPath:a_article.localName+'/'+a_HTML+'.zip',
                                    resID:a_article.html[a_HTML].resID || null,
                                    fileString:fileString
                                });
                                console.log('scanHTMLZipInfoFromConfigJSON, waiting4upload:',a_article.localName+'/'+a_HTML+'.zip');
                            }else{
                                console.error('can not find:',a_article.localName+'/'+a_HTML+'.zip, please zip it before upload.');
                            }
                        }
                    }
                }
            });
            // console.log('scanHTMLZipInfoFromConfigJSON, waiting4upload is:',waiting4upload)
            a_options.callback(a_options.config,waiting4upload);
        }
    }
    that.checkHTMLInCMS = function(a_options){
        console.log('checkHTMLInCMS')
        // console.log('a_options is:',a_options)
        var options = {
            host: a_options.config.cmsip,
            port: a_options.config.cmsport,
            path: '/content.do?issueId='+a_options.config.issueID+'&articleId='+a_options.zipConfig.articleID,
            method: "GET",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Content-Length": 0,
                "Accept": "text/plain, */*; q=0.01",
                "Cookie": a_options.config.cookie,
                "Accept-Language": "zh-cn",
                "Cache-Control": "no-cache",
                "Connection": "Keep-Alive",
                "Host": a_options.config.cmsip+ ':'+a_options.config.cmsport,
                "Referer": "http://"+a_options.config.cmsip + ':'+a_options.config.cmsport,
                "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ZHCN)",
                "X-Requested-With": "XMLHttpRequest"
            }
        };
        var req = http.request(options, function(res) {
            var body = "";
            res.setEncoding("utf8");
            res.on("data", function(data) {
                body += data;
            });
            res.on("end", function() {
                if(a_options.callback) a_options.callback(checkHTMLByWebPageString(body) );
            });
        }).on("error", function(e) {
            console.error('checkHTMLInCMS, http.request error: ', e);
        });
        req.write("");
        req.end();
        function checkHTMLByWebPageString(a_bodyString){
            try{
                var $ = cheerio.load(a_bodyString);
            }catch(e){
                console.error('cheerio.load error');
                return null;
            }
            var materialInfoJSON = {readyArr:[],resArr:[]};
            var $materialForm = $('.panel-body>.form-horizontal');
            for (var i = $materialForm.length - 1; i >= 0; i--) {
                if(0==$($materialForm[i]).find('.material-edit')){// 未上传的
                    var o = {
                        resID:$($materialForm[i]).find('.material-info-id')[0].attribs.value,
                        htmlID:$($materialForm[i]).find('.material-package')[0].attribs.mid,
                        comment:$($materialForm[i]).find('.material-info-id')[0].attribs.value,
                        action:$($materialForm[i]).find('#material_title.form-control')[0].attribs.value,
                        articleID:a_options.zipConfig.articleID,
                        issueID:a_options.config.issueID,
                        page:a_options.zipConfig.page
                    }
                    // if(isPhone){
                    //     o.resID2 = $($materialForm[i]).find('.material-info-id')[1].attribs.value
                    // }
                    materialInfoJSON.readyArr.push(o);
                    // return o;
                }
                else{
                    var o = {
                        resID:$($materialForm[i]).find('.material-info-id')[0].attribs.value,
                        htmlID:$($materialForm[i]).find('.material-package')[0].attribs.mid,
                        comment:$($materialForm[i]).find('.material-info-id')[0].attribs.value,
                        action:$($materialForm[i]).find('#material_title.form-control')[0].attribs.value,
                        articleID:a_options.zipConfig.articleID,
                        issueID:a_options.config.issueID,
                        page:a_options.zipConfig.page
                    }
                    // if(isPhone){
                    //     o.resID2 = $($materialForm[i]).find('.material-info-id')[1].attribs.value
                    // }
                    if(a_options.zipConfig.resID && a_options.zipConfig.resID == o.resID){
                        console.log('find one exist in CMS, resID is:',o.resID);
                        return o;
                    }
                    // materialInfoJSON.resArr.push(o);
                }
            };
            // return materialInfoJSON;
            if(0<materialInfoJSON.readyArr.length){
                console.log('find one redundancy in CMS, resID is:',materialInfoJSON.readyArr[0].resID);
                return materialInfoJSON.readyArr[0];
            }else{
                return null;
            }
        }
    }
    that.createHTMLInCMS = function(a_options){
        console.log('createHTMLInCMS')
        var boundarykey = 'Fcw7F24RO2XXvufJ'//Math.random().toString(16);//
        var boundary = '----WebKitFormBoundary' + boundarykey ;
        var enddata = '\r\n--' + boundary + '--';
        var payload = '--' + boundary + '\r\n'
        // use your file's mime type here, if known
        + 'Content-Disposition: form-data; name="articleId"' + '\r\n\r\n'
        + a_options.zipConfig.articleID + '\r\n'
        + '--' + boundary + '\r\n'
        + 'Content-Disposition: form-data; name="matType"' + '\r\n\r\n'
        + '6'
        + enddata;


        var len = Buffer.byteLength(payload);
        // debugLog('payload is',payload);
        // debugLog('len is',len);
        var options = {
            host: a_options.config.cmsip,
            port: a_options.config.cmsport,
            path: "/material/add.do",
            // host:"www.baidu.com",
            // path:"/",
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data; boundary=" + boundary,
                "Content-Length": len,
                "Accept":"*/*",
                "Accept-Encoding":"gzip,deflate,sdch",
                "Accept-Language":"zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,es;q=0.2",
                // "Accept": "text/plain, */*; q=0.01",
                "Cookie": a_options.config.cookie,
                "Cache-Control": "no-cache",
                "Connection": "Keep-Alive",
                "Host": a_options.config.cmsip+":"+a_options.config.cmsport,
                "Origin": "http://"+a_options.config.cmsip+":"+a_options.config.cmsport,
                "Pragma": "no-cache",
                // "Origin":"http://192.168.11.20:8888",
                "Referer": "http://"+a_options.config.cmsip+":"+a_options.config.cmsport+"/content.do?issueId="+a_options.config.issueID+"&articleId="+a_options.config.articleID+"&materialId=0",
                "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36"
            }
        };

        var req = http.request(options, function(res) {
            var body = "";
            res.setEncoding("utf8");
            if(200 == res.statusCode){
                if(a_options.callback ) a_options.callback();
            }else{
                console.error('createHTMLInCMS error,res.statusCode is:',res.statusCode);
            }
            // debugLog("sendAddResXHR statusCode: ", res.statusCode);
            // debugLog("headers: ", res.headers);
            // res.on("data", function(data) {
            //     body += data
            // });
            // res.on("end", function() {
                
            // });
            
        }).on('error', function(e) {
                console.error("createHTMLInCMS error:"+e);
            });;

        req.write(payload);
        req.end();
    }
    that.getHTMLInCMS = function(a_options){
        var that = this;
        // if(that.tryToGetHTMLInCMSLen){
        //     that.tryToGetHTMLInCMSLen++;
        // }else{
        //     that.tryToGetHTMLInCMSLen = 0;
        // }
        console.log('getHTMLInCMS')
        try{
            that.checkHTMLInCMS({
                config:a_options.config,
                zipConfig:a_options.zipConfig,
                callback:function(a_res) {
                    // has one
                    if(a_res){
                        console.log('has one,html is:',a_res)
                        a_options.callback(a_res);
                    }else{
                        console.log('no redundancy, createHTMLInCMS')
                        that.createHTMLInCMS({
                            config:a_options.config,
                            zipConfig:a_options.zipConfig,
                            callback:function(){
                                that.getHTMLInCMS(a_options);
                            }
                        });
                    }
                }
            });
        }catch(e){
            console.error('upload error:',e)
        }

    }
    that.uploadCode = function(a_options, a_callback){
        console.log('uploadCode')
        try{
            var that = this;
            var boundarykey = Math.random().toString(16);//'Fcw7F24RO2XXvufJ'//
            var boundary = '----WebKitFormBoundary' + boundarykey ;
            var zip_data = JSON.stringify({
                'id': a_options.htmlConfig.resID,
                'materialStructId': a_options.htmlConfig.htmlID,
                // 'action': 'file:article-'+a_options.htmlConfig.articleID+'/html-'+a_options.htmlConfig.htmlID+'/index.html',
                'action': a_options.htmlConfig.action,
                'comment': 'p'+(1+parseInt(a_options.htmlConfig.page))+',resID is:'+a_options.htmlConfig.resID+', update by '+a_options.config.htmlauthor+ ' at :'+new Date(),
                'page': a_options.htmlConfig.page,
                'z': '0',
                'x': '0',
                'y': '0',
                'w': a_options.config.htmlWidth,
                'h': a_options.config.htmlHeight,
                'bigPage':false
            });
            zip_dataCon = '[' + zip_data + ']';
            var deviceType = '1,2';
            // var deviceType = isPhone?'4,8':'1,2';
            // if(isPhone){
            //     var zip_data = JSON.stringify({
            //       'id': a_options.htmlConfig.resID,
            //       'materialStructId': a_options.htmlConfig.htmlID,
            //       // 'action': 'file:article-'+a_options.htmlConfig.articleID+'/html-'+a_options.htmlConfig.htmlID+'/index.html',
            //       'action': a_options.htmlConfig.action,
            //       'comment': 'p'+a_options.htmlConfig.page+', iphone5, update by '+userName+ ' at :'+new Date(),
            //       'page': a_options.htmlConfig.page,
            //       'z': '0',
            //       'x': '0',
            //       'y': '0',
            //       'w': iphone5Width,
            //       'h': iphone5Height,
            //       'bigPage':false
            //   });
            //     var zip_data2 = JSON.stringify({
            //         'id': a_options.htmlConfig.resID2,
            //         'materialStructId': a_options.htmlConfig.htmlID,
            //         'action': a_options.htmlConfig.action,
            //         'comment': 'p'+a_options.htmlConfig.page+', iphone4, update by '+userName+ ' at :'+new Date(),
            //         'page': a_options.htmlConfig.page,
            //         'z': '0',
            //         'x': '0',
            //         'y': '0',
            //         'w': htmlWidth,
            //         'h': htmlHeight,
            //         'bigPage':false
            //     });
            //     zip_dataCon = '[' + zip_data + ',' + zip_data2 + ']';
            // }
            //
            var enddata = '\r\n--' + boundary + '--';
            var payload = '--' + boundary + '\r\n'
            // use your file's mime type here, if known
            + 'Content-Disposition: form-data; name="json"' + '\r\n\r\n'
            + zip_dataCon + '\r\n'
            + '--' + boundary + '\r\n'
            + 'Content-Disposition: form-data; name="deviceType"' + '\r\n\r\n'
            + deviceType + '\r\n'
            + '--' + boundary + '\r\n'
            // "name" is the name of the form field
            // "filename" is the name of the original file
            + 'Content-Disposition: form-data; name="'+a_options.htmlConfig.htmlID+'"; filename="0.zip"\r\n'
            + '\r\n';
            // + a_options.htmlConfig.fileString + '\r\n\r\n'
            // + enddata;

            var len = Buffer.byteLength(payload)+a_options.zipConfig.fileString.length+Buffer.byteLength(enddata);

            var options = {
                host: a_options.config.cmsip,
                port: a_options.config.cmsport,
                path: "/material/update.do",
                method: "POST",
                headers: {
                    "Content-Type": "multipart/form-data; boundary=" + boundary,
                    "Content-Length": len,
                    "Accept":"*/*",
                    "Accept-Encoding":"gzip,deflate,sdch",
                    "Accept-Language":"zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,es;q=0.2",
                    // "Accept": "text/plain, */*; q=0.01",
                    "Cookie": a_options.config.cookie,
                    "Cache-Control": "no-cache",
                    "Connection": "Keep-Alive",
                    "Host": a_options.config.cmsip+":"+a_options.config.cmsport,
                    "Origin": "http://"+a_options.config.cmsip+":"+a_options.config.cmsport,
                    "Pragma": "no-cache",
                    // "Origin":"http://192.168.11.20:8888",
                    "Referer": "http://"+a_options.config.cmsip+":"+a_options.config.cmsport+"/content.do?issueId="+a_options.htmlConfig.issueID+"&articleId="+a_options.htmlConfig.articleID+"&materialId=0",
                    "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36"
                }
            };

            var req = http.request(options, function(res) {
                var body = "";
                res.setEncoding("utf8");
                if(200 == res.statusCode){
                    console.log('post ' + a_options.zipConfig.zipPath + ' to html-'+a_options.htmlConfig.htmlID + ' ok.');
                    a_options.callback();
                }else{
                    console.error('post ' + a_options.zipName + ' faile.');
                }
                // debugLog("headers: ", res.headers);
                res.on("data", function(data) {
                    body += data
                    // debugLog(data);
                });
                res.on("end", function() {
                    // if(a_options.callback) a_options.callback();
                    // debugLog('sendZip body is', body);
                });
                res.on('error', function(e) {
                    console.error("error:"+e);
                });
            });

            req.write(payload);
            req.write(a_options.zipConfig.fileString);
            req.end(enddata);
        }catch(e){
            console.error('uploadcode error:',e)
        }
    }

    that.upload = function(a_options){
        console.log('upload')
        var that = this;
        if(0==a_options.waiting4upload.length){
            // console.log('upload,a_options.config is:',a_options.config)
            that.updateConfigJSON({data:a_options.config});
            if(a_options.callback) a_options.callback();
            return;
        }
        var o = a_options.waiting4upload.shift();
        console.log('start upload :',o.zipPath)
        try{
            that.getHTMLInCMS({
                config:a_options.config,
                zipConfig:o,
                callback:function(a_htmlConfig) {
                that.uploadCode({
                    config:a_options.config,
                    htmlConfig:a_htmlConfig,
                    zipConfig:o,
                    callback:function() {
                        // update local JSON file
                        a_options.config.articles[o.articleIndex].html[o.page].type = 'sent';
                        a_options.config.articles[o.articleIndex].html[o.page].resID = a_htmlConfig.resID;
                        that.upload(a_options);
                }});
            }});
        }catch(e){
            console.error('upload error:',e)
        }
    }

    that.updateConfigJSON = function(a_options){
        var that = this;
        try{
            var JSONString = JSON.stringify(a_options.data);
        }catch(e){
            console.error('updateConfigJSON, JSON.stringify error:',e);
        }
        // console.log('JSONString is:',JSONString);
        fs.writeFileSync(that.path+localconfigName, JSONString);
    }

}



exports.UploadToCMS = UploadToCMS;