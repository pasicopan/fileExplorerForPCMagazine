var fs = require('fs');
var path = require('path');
var http = require('http');

var localconfigName = '\\localconfig.json';
function loadDB(a_URL,a_callback) {
    fs.readFile(a_URL+localconfigName, 'utf8',function(err, data) {
        if (err) {
            console.log("FATAL An error occurred trying to read in the file: " + err);
            // process.exit(-2);
            return;
        }
        if (data) {
                // console.log('data is:',data)
                data = data.replace(/.*?\{/,'{');
                console.log('data2 is:',data)
                dataarr = data.split('');
                // console.log('dataarr is:',dataarr)
            try{
                console.log(JSON.parse(data))
                a_callback(JSON.parse(data));
            }catch(e){
                console.log(e)
            }
            // a_callback(JSON.parse(data));
        } else {
            console.log("No data in "+localconfigName);
            // process.exit(-1);
            return;
        }
    });
}

function UpdateArticleFolder(){
    var that = this;
    that.init = function(options) {
        console.log('\nUpdateArticleFolder==================================')
        that.path = options.path;
        process.chdir(that.path);
        loadDB(options.path,function(a_json) {
            console.log(a_json.cmsip, a_json.cmsport);
            that.getArticlesNameFromCMS({config:a_json,callback:function(data) {
                // console.log('getArticlesNameFromCMS,data is:',data)
                that.filterArticlesNameFromJSONString({config:a_json,data:data,callback:function(data){
                    // console.log('filterArticlesNameFromJSONString,array is:',data);
                    that.creatFolderByArticlesName({articles:data,config:a_json,callback:function(){
                        window.location.reload();
                    }});
                }});
            }});
        });
    }
    that.getArticlesNameFromCMS = function(a_options) {
        // http://192.168.11.9:8888/magazine/preview/ipad2/170/magazine.json
        var options = {
            host: a_options.config.cmsip,
            port: a_options.config.cmsport,
            path: '/magazine/preview/'+a_options.config.device+'/'+a_options.config.issueID+'/magazine.json'
        };
        http.get(options, function(res) {
            var body = '';
            res.on('data', function(data) {
                body += data;
                // console.log('data is:',data);
            }).on('end', function() {
                a_options.callback(body);
                return true;
            }).on('error', function() {
                console.error("error:"+e);
                return false;
            });
        });

    }
    that.filterArticlesNameFromJSONString = function(a_options){
        console.log('filterArticlesNameFromJSONString, a_options is:',a_options)
        try{
            var magazineJSON = JSON.parse(a_options.data);
        }catch(e){
            console.error('filterArticlesNameFromJSONString ,JSON.parse error:',e);
            window.prompt('如果以下路径没有内容，请预览杂志后再尝试！','http://'+a_options.config.cmsip+':'+a_options.config.cmsport+'/magazine/preview/'+a_options.config.device+'/'+a_options.config.issueID+'/magazine.json')
            return;
        }
        var arr = [];
        magazineJSON.sections.forEach(function(a_section, a_index) {
            // console.log('a_section is:',a_section)
            a_section.articles.forEach(function(a_article, a_index) {
                arr.push({title:a_article.title,id:a_article.id});
            });
        });
        a_options.callback(arr);
    }
    that.creatFolderByArticlesName = function(a_options){
        var that = this;
        var CMSArticlesName = {};
        var LocalArticlesName = {};
        console.log('a_options.config is:',a_options.config)
        var folderExist;
        // first update info from CMS
        if(!a_options.config.articles){
            a_options.articles.forEach(function(a_article, a_index) {
                // CMSArticlesName[a_article.id] = a_article;
                try{
                    if(!fs.existsSync(a_article.title)){
                        console.log('first update, fs.mkdir,title is:',a_article.title)
                        fs.mkdir(a_article.title);
                    }else{
                        console.warn('find same name:',CMSArticlesName[a_articleSaved.id].title)
                    }
                }catch(e){
                    console.error('fs.mkdir error:',e)
                }
            })
        }else{
            a_options.articles.forEach(function(a_article, a_index) {
                CMSArticlesName[a_article.id] = a_article;
            })
            a_options.config.articles.forEach(function(a_articleSaved, a_articleSavedIndex) {
                LocalArticlesName[a_articleSaved.id] = a_articleSaved;
                // local ID not exist, add new item
                if(!CMSArticlesName[a_articleSaved.id]){
                    try{
                        if(!fs.existsSync(CMSArticlesName[a_articleSaved.id].title)){
                            console.log('fs.mkdir,title is:',CMSArticlesName[a_articleSaved.id].title)
                            fs.mkdir(CMSArticlesName[a_articleSaved.id].title);
                        }else{
                            console.warn('find same name:',CMSArticlesName[a_articleSaved.id].title)
                        }
                    }catch(e){
                        console.error('fs.mkdir error:',e)
                    }
                // local ID exist,and title changed, rename item
                }else if(CMSArticlesName[a_articleSaved.id].title != a_articleSaved.title){
                    fs.rename(a_articleSaved.title, CMSArticlesName[a_articleSaved.id].title);
                }
            })
            for(var i in LocalArticlesName){
                // CMS ID not exist, mark "[del]" to old item
                if(!CMSArticlesName[i]){
                    if(fs.existsSync(LocalArticlesName[i].title)){
                        fs.rename(LocalArticlesName[i].title,'[del]'+LocalArticlesName[i].title);
                    }else{
                        console.warn('rename by someone without update local config JSON');
                    }
                }
            }
        }
        CMSArticlesName = LocalArticlesName = null;
        delete CMSArticlesName,LocalArticlesName;

        // update new articles info into local config JSON file
        a_options.config.articles = a_options.articles;
        // console.log('a_options.config is:',a_options.config);
        that.updateConfigJSON({data:a_options.config});
        if(a_options.callback) a_options.callback();
    }
    that.updateConfigJSON = function(a_options){
        var that = this;
        var JSONString = JSON.stringify(a_options.data);
        // console.log('JSONString is:',JSONString);
        fs.writeFileSync(that.path+localconfigName, JSONString);
    }

}



exports.UpdateArticleFolder = UpdateArticleFolder;